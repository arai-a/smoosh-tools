#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.

import argparse
import json
import pathlib
import os
import re
import subprocess
import sys
import urllib.request


def die(s):
    print(s, out=sys.stderr)
    sys.exit(1)


class Logger:
    ENABLED = True

    @classmethod
    def disable(cls):
        cls.ENABLED = False

    @classmethod
    def info(cls, s):
        if cls.ENABLED:
            print('[INFO]', s)

    @classmethod
    def cmd(cls, cmd):
        def format_cmd(s):
            if ' ' in s:
                escaped = s.replace('"', '\"')
                return f'"{escaped}"'
            return s

        formatted_command = ' '.join(list(map(format_cmd, cmd)))
        cls.info(f'$ {formatted_command}')


class Environment:
    @classmethod
    def assert_in_mc(cls, soft=False):
        cls.MC_DIR = pathlib.Path().absolute()

        cls.SMOOSH_DIR = cls.MC_DIR / 'js' / 'src' / 'frontend' / 'smoosh'
        cls.MC_CARGO_TOML = cls.SMOOSH_DIR / 'Cargo.toml'

        if not cls.MC_CARGO_TOML.exists():
            if soft:
                return False
            die(f'{cls.MC_CARGO_TOML} not found.')

        jsparagus_dir = cls.MC_DIR.parent / 'jsparagus'
        if not jsparagus_dir.exists():
            if soft:
                return False
            die(f'{jsparagus_dir} not found.')

        cls.__assert_in_jsparagus_with(jsparagus_dir, soft)
        return True

    @classmethod
    def assert_in_jsparagus(cls):
        cls.__assert_in_jsparagus_with(pathlib.Path().absolute())

    @classmethod
    def __assert_in_jsparagus_with(cls, jsparagus_dir, soft=False):
        cls.JSPARAGUS_DIR = jsparagus_dir

        cls.JSPARAGUS_CARGO_TOML = cls.JSPARAGUS_DIR / 'Cargo.toml'

        if not cls.JSPARAGUS_CARGO_TOML.exists():
            if soft:
                return False
            die(f'{cls.JSPARAGUS_CARGO_TOML} not found.')

        with open(cls.JSPARAGUS_CARGO_TOML, 'r') as f:
            if 'name = "jsparagus"' not in f.read():
                die(f'{cls.JSPARAGUS_CARGO_TOML} is not for jsparagus.')

        return True

    @classmethod
    def mc(cls):
        cls.assert_in_mc(soft=False)
        return GitRepository(cls.MC_DIR)

    @classmethod
    def jsparagus(cls):
        if not cls.assert_in_mc(soft=True):
            cls.assert_in_jsparagus()
        return GitRepository(cls.JSPARAGUS_DIR)


class GitRepository:
    def __init__(self, path):
        self.path = path

        self.git_dir = self.path / '.git'
        if not self.git_dir.exists():
            die(f'{self.path} is not a Git repository.')

    def assert_clean(self):
        cmd = ['git', 'diff-index', '--quiet', 'HEAD', '--']
        output = subprocess.run(cmd,
                                capture_output=True,
                                cwd=self.path)
        if output.returncode != 0:
            die('Uncommitted changes found')

        cmd = ['git', 'diff-index', '--cached', '--quiet', 'HEAD', '--']
        output = subprocess.run(cmd,
                                capture_output=True,
                                cwd=self.path)
        if output.returncode != 0:
            die('Uncommitted changes found')

    def get_output(self, *args):
        cmd = ['git'] + list(args)
        Logger.cmd(cmd)
        output = subprocess.run(cmd,
                                capture_output=True,
                                cwd=self.path)

        return output.stdout.decode()

    def run(self, *args):
        cmd = ['git'] + list(args)
        Logger.cmd(cmd)
        subprocess.run(cmd,
                       check=True,
                       cwd=self.path)

    def ls_remote(self, remote):
        result = {}
        for line in self.get_output('ls-remote', remote).strip().split('\n'):
            sha, ref = line.split('\t')
            result[ref] = sha
        return result

    def fetch(self, branch):
        return self.get_output('fetch', branch)

    def commit_message(self, rev):
        return self.get_output('log', '-1', '--pretty=format:%s%n', rev)

    def branch(self):
        return self.get_output('rev-parse', '--abbrev-ref', 'HEAD').strip()


class CIGeneratedBranch:
    def get():
        jsparagus = Environment.jsparagus()
        remotes = jsparagus.ls_remote('upstream')

        branch = 'refs/heads/ci_generated'

        if branch not in remotes:
            die(f'{branch} not found in upstream')

        return remotes[branch]


class JsparagusBuilder:
    def run(opt):
        Environment.assert_in_mc()

        cmd = ['make', 'all']
        Logger.cmd(cmd)
        subprocess.run(cmd,
                       cwd=Environment.JSPARAGUS_DIR)


class ShellBuilder:
    def run(opt):
        Environment.assert_in_mc()

        build_env = os.environ.copy()
        #configs_dir = Environment.SMOOSH_DIR / 'mozconfigs'
        configs_dir = pathlib.Path(__file__).resolve().parent.parent / 'mozconfigs'
        if opt:
            build_env['MOZCONFIG'] = configs_dir / 'smoosh-opt'
        else:
            build_env['MOZCONFIG'] = configs_dir / 'smoosh-debug'

        cmd = ['./mach', 'build']
        Logger.cmd(cmd)
        subprocess.run(cmd,
                       cwd=Environment.MC_DIR,
                       env=build_env)


class ShellRunner:
    def run(opt):
        Environment.assert_in_mc()

        build_env = os.environ.copy()
        #configs_dir = Environment.SMOOSH_DIR / 'mozconfigs'
        configs_dir = pathlib.Path(__file__).resolve().parent.parent / 'mozconfigs'
        if opt:
            build_env['MOZCONFIG'] = configs_dir / 'smoosh-opt'
        else:
            build_env['MOZCONFIG'] = configs_dir / 'smoosh-debug'

        cmd = ['./mach', 'run', '--smoosh']
        Logger.cmd(cmd)
        subprocess.run(cmd,
                       cwd=Environment.MC_DIR,
                       env=build_env)


class TestRunner:
    def run(test, opt):
        Environment.assert_in_mc()

        build_env = os.environ.copy()
        #configs_dir = Environment.SMOOSH_DIR / 'mozconfigs'
        configs_dir = pathlib.Path(__file__).resolve().parent.parent / 'mozconfigs'
        if opt:
            build_env['MOZCONFIG'] = configs_dir / 'smoosh-opt'
        else:
            build_env['MOZCONFIG'] = configs_dir / 'smoosh-debug'

        cmd = ['./mach', test, '--args=--smoosh']
        Logger.cmd(cmd)
        subprocess.run(cmd,
                       cwd=Environment.MC_DIR,
                       env=build_env)


class CargoUpdater:
    @classmethod
    def update_local(cls):
        Environment.assert_in_mc()

        def on_official(line, lines):
            line = '# ' + line
            lines.append(line)

            line = 'jsparagus = { path = "../../../../../jsparagus/" }\n'
            Logger.info(f'Rewriting reference: "{line}"')
            lines.append(line)

        def on_finish():
            pass

        cls.__update(on_official, on_finish)

    @classmethod
    def update_official(cls, rev):
        Environment.assert_in_mc()

        if rev == '-':
            rev = CIGeneratedBranch.get()

        found = False

        def on_official(line, lines):
            nonlocal rev, found

            found = True

            if rev:
                line = re.sub(f'rev = ".+"', 'rev = "{rev}"', line)
            Logger.info(f'Rewriting reference: "{line}"')
            lines.append(line)

        def on_finish():
            if not found:
                die('Commented out official reference not found.')

        cls.__update(on_official, on_finish)

    @classmethod
    def update_fork(cls, user, branch):
        Environment.assert_in_mc()

        def on_official(line, lines):
            line = '# ' + line
            lines.append(line)

            line = f'jsparagus = {{ git = "https://github.com/{user}/jsparagus", branch = "{branch}" }}\n'
            Logger.info(f'Rewriting reference: "{line}"')
            lines.append(line)

        def on_finish():
            pass

        cls.__update(on_official, on_finish)

    def __update(on_official, on_finish):
        cargo_toml = Environment.MC_CARGO_TOML

        url = 'https://github.com/mozilla-spidermonkey/jsparagus'
        ORIG_DEP = f'jsparagus = {{ git = "{url}",'
        OTHER_DEP = 'jsparagus ='

        lines = []
        with open(cargo_toml, 'r') as f:
            for line in f:
                if line.startswith(ORIG_DEP) or \
                   line.startswith('# ' + ORIG_DEP):
                    if line.startswith('# ' + ORIG_DEP):
                        line = line[2:]

                    on_official(line, lines)
                elif line.startswith(OTHER_DEP):
                    continue
                else:
                    lines.append(line)

        on_finish()

        content = ''.join(lines)

        with open(cargo_toml, 'w') as f:
            f.write(content)


class PushToGeneratedBranch:
    def run():
        jsparagus = Environment.jsparagus()
        jsparagus.assert_clean()

        git_pat = re.compile(r'git@github.com:(.+)/jsparagus.git')
        origin = jsparagus.get_output('remote', 'get-url', 'origin')
        m = git_pat.search(origin)
        github_user = m.group(1)

        branch = jsparagus.branch()
        if branch == 'HEAD':
            die('Detached HEAD is not supported. Please checkout branch')

        gen_branch = f'{branch}-generated-branch'

        jsparagus.run('checkout', '-b', gen_branch)

        try:
            cmd = ['make', 'all']
            Logger.cmd(cmd)
            subprocess.run(cmd,
                           check=True,
                           cwd=jsparagus.path)

            gitignore_path = jsparagus.path / '.gitignore'
            with open(gitignore_path, 'r') as f:
                gitignore_content = f.read()

            Logger.info('Modifying .gitignore')
            with open(gitignore_path, 'w') as f:
                f.write(gitignore_content.replace('*_generated.rs', ''))
            try:
                jsparagus.run('add', '.')

                jsparagus.run('commit', '-m', 'Add generated files')

                try:
                    jsparagus.run('push', '-f', 'origin', gen_branch)
                finally:
                    jsparagus.run('reset', '--soft', 'HEAD^')
            finally:
                Logger.info('Restoring .gitignore')
                with open(gitignore_path, 'w') as f:
                    f.write(gitignore_content)

                jsparagus.run('reset')
        finally:
            jsparagus.run('checkout', branch)
            jsparagus.run('branch', '-D', gen_branch)

        return github_user, gen_branch


class PushToTry:
    def run(build):
        mc = Environment.mc()
        mc.assert_clean()

        try_url = 'hg::https://hg.mozilla.org/try'
        remotes = mc.get_output('remote').strip().split('\n')
        if 'try' not in remotes:
            mc.run('remote', 'add', 'try', try_url)

        github_user, gen_branch = PushToGeneratedBranch.run()

        CargoUpdater.update_fork(github_user, gen_branch)

        cmd = ['./mach', 'vendor', 'rust']
        Logger.cmd(cmd)
        subprocess.run(cmd,
                       check=True,
                       cwd=mc.path)

        mc.run('add', '.')
        mc.run('commit', '-m', 'Update vendored crates for jsparagus')
        try:
            platform = 'sm-smoosh-linux64'
            syntax = f'try: -b {build} -p {platform} -u none -t none'
            mc.run('commit', '--allow-empty', '-m', syntax)
            try:
                mc.run('push', 'try')
            finally:
                mc.run('reset', '--hard', 'HEAD^')
        finally:
            mc.run('reset', '--hard', 'HEAD^')


class MCRemoteRepository:
    HG_API_URL = 'https://hg.mozilla.org/mozilla-central/'

    @classmethod
    def call(cls, name, path):
        url = f'{cls.HG_API_URL}{name}{path}'

        req = urllib.request.Request(url, None, {})
        response = urllib.request.urlopen(req)
        return response.read()

    @classmethod
    def call_json(cls, name, path):
        return json.loads(cls.call(name, path))

    @classmethod
    def file(cls, rev, path):
        return cls.call('raw-file', f'/{rev}{path}')


class TreeHerder:
    API_URL = 'https://treeherder.mozilla.org/api/'

    @classmethod
    def call(cls, name):
        url = f'{cls.API_URL}{name}'

        req = urllib.request.Request(url, None, {
            'User-Agent': 'smoosh-tools',
        })
        response = urllib.request.urlopen(req)
        return response.read()

    @classmethod
    def call_json(cls, name):
        return json.loads(cls.call(name))

    @classmethod
    def push_id(cls, rev):
        push = cls.call_json(f'project/mozilla-central/push/?full=true&format=json&count=1&revision={rev}')
        return push['results'][0]['id']

    @classmethod
    def jobs(cls, push_id):
        push = cls.call_json(f'jobs/?push_id={push_id}&format=json')
        count = push['count']
        results = []
        results += push['results']

        page = 2
        while len(results) < count:
            push = cls.call_json(f'jobs/?push_id={push_id}&format=json&page={page}')
            results += push['results']
            page += 1

        return results


class Status:
    def run():
        Logger.info('Fetching ci_generated branch')

        jsparagus = Environment.jsparagus()
        jsparagus.fetch('ci_generated')

        Logger.info('Checking mozilla-central tip revision')

        m_c_rev = MCRemoteRepository.call_json('json-log', '/tip/')['node']
        cargo_file = MCRemoteRepository.file(
            m_c_rev,
            '/js/src/frontend/smoosh/Cargo.toml'
        ).decode()
        m = re.search('rev = "(.+)"', cargo_file)
        ci_generated_rev = m.group(1)

        Logger.info('Checking jsparagus referred by mozilla-central')

        message = jsparagus.commit_message(ci_generated_rev)
        m = re.search('for ([A-Fa-f0-9]+)', message)
        master_rev = m.group(1)

        Logger.info('Checking build status')

        push_id = TreeHerder.push_id(m_c_rev)
        jobs = TreeHerder.jobs(push_id)
        nonunified_job = None
        smoosh_job = None
        for job in jobs:
            if 'spidermonkey-sm-nonunified-linux64/debug' in job:
                nonunified_job = job
            if 'spidermonkey-sm-smoosh-linux64/opt' in job:
                smoosh_job = job

        def get_result(job):
            if job:
                if 'completed' in job:
                    if 'success' in job:
                        return 'OK'
                    else:
                        return 'NG'
                else:
                    return 'not yet finished'
            else:
                return 'unknown'

        nonunified_result = get_result(nonunified_job)
        smoosh_result = get_result(smoosh_job)

        print(f'mozilla-central tip: {m_c_rev}')
        print(f'referred jsparagus revision: {master_rev}')
        print(f'Build status:')
        print(f'  Build with --enable-smoosh: {nonunified_result}')
        print(f'  Test with --smoosh: {smoosh_result}')


parser = argparse.ArgumentParser(
    description='Tools for SmooshMonkey + jsparagus development')

subparsers = parser.add_subparsers(
    dest='command',
    required=True)

build_parser = subparsers.add_parser(
    'build',
    help='(m-c) Build SpiderMonkey with SmooshMonkey-enabled')
build_parser.add_argument(
    '--local', action='store_true',
    help='Use local jsparagus clone')
build_parser.add_argument(
    '--opt', action='store_true',
    help='Build optimized binary (if not specified, build debug binary)')

run_parser = subparsers.add_parser(
    'run',
    help='(m-c) Run SpiderMonkey with SmooshMonkey-enabled')
run_parser.add_argument(
    '--opt', action='store_true',
    help='Run optimized binary (if not specified, run debug binary)')

jstests_parser = subparsers.add_parser(
    'jstests',
    help='(m-c) Run jstests with SmooshMonkey-enabled')
jstests_parser.add_argument(
    '--opt', action='store_true',
    help='Run optimized binary (if not specified, run debug binary)')

jittest_parser = subparsers.add_parser(
    'jit-test',
    help='(m-c) Run jit-test with SmooshMonkey-enabled')
jittest_parser.add_argument(
    '--opt', action='store_true',
    help='Run optimized binary (if not specified, run debug binary)')

update_parser = subparsers.add_parser(
    'cargo',
    help='(m-c) Change jsparagus reference in Cargo.toml')
type_parser = update_parser.add_subparsers(
    dest='type',
    required=True)
type_parser.add_parser(
    'l',
    help='Use local jsparagus')
official_parser = type_parser.add_parser(
    'o',
    help='Use official jsparagus')
official_parser.add_argument(
    'REV', nargs='?',
    help='Revision, or "-" for ci_generated head. defaults to current revision')
fork_parser = type_parser.add_parser(
    'f',
    help='Use forked jsparagus')
fork_parser.add_argument(
    'USER',
    help='GitHub user name')
fork_parser.add_argument(
    'BRANCH',
    help='Branch to use')

try_parser = subparsers.add_parser(
    'try',
    help='(m-c) Push to try with jsparagus generated branch. This requires L1 Commit Access')
try_parser.add_argument(
    '-b', type=str,
    default='do',
    help='build type (o/d/do)')

subparsers.add_parser(
    'gen',
    help='(jsparagus) Push to "generated" branch, with generated files included')

subparsers.add_parser(
    'ci_generated_head',
    help='(jsparagus) Get SHA of ci_generated branch HEAD')

subparsers.add_parser(
    'status',
    help='(jsparagus) Show latest mozilla-central revision, and jsparagus revision referred from it, and whether the pair builds or not')

args = parser.parse_args()

if args.command == 'build':
    if args.local:
        CargoUpdater.update_local()
        JsparagusBuilder.run()
    ShellBuilder.run(args.opt)
elif args.command == 'run':
    ShellRunner.run(args.opt)
elif args.command == 'jstests':
    TestRunner.run('jstests', args.opt)
elif args.command == 'jit-test':
    TestRunner.run('jit-test', args.opt)
elif args.command == 'cargo':
    if args.type == 'l':
        CargoUpdater.update_local()
    elif args.type == 'o':
        CargoUpdater.update_official(args.REV)
    elif args.type == 'f':
        CargoUpdater.update_fork(args.USER, args.BRANCH)
elif args.command == 'try':
    PushToTry.run(args.b)
elif args.command == 'gen':
    PushToGeneratedBranch.run()
elif args.command == 'ci_generated_head':
    Logger.disable()
    print(CIGeneratedBranch.get())
elif args.command == 'status':
    Status.run()
